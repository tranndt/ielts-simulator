{"version":3,"sources":["components/Question lazy groupOptions: {} namespace object","components/Navigation/HomePage.js","components/assets/logo.jpg","components/Navigation/Header.js","components/Reading/PassageFrame.js","components/Question/MultipleChoiceSelectOneQuestionItem.js","components/Question/QuestionTaskDescription.js","components/Question/MultipleChoiceSelectOneQuestionTask.js","components/Question/MultipleChoiceSelectManyQuestionItem.js","components/Question/MultipleChoiceSelectManyQuestionTask.js","components/Question/TableCompletionQuestionItem.js","components/Table/DataTable.js","components/Question/TableCompletionQuestionTask.js","components/Question/NoteCompletionQuestionItem.js","components/Question/NoteCompletionQuestionTask.js","components/Question/SentenceCompletionQuestionItem.js","components/Question/SentenceCompletionQuestionTask.js","components/Question/SummaryCompletionQuestionItem.js","components/Question/SummaryCompletionQuestionTask.js","components/Question/SummaryCompletionWordListQuestionItem.js","components/Table/ListOfHeadingsTable.js","components/Question/SummaryCompletionWordListQuestionTask.js","components/Question/DiagramCompletionQuestionItem.js","components/Question/DiagramCompletionQuestionTask.js","components/Question/FlowChartCompletionQuestionItem.js","components/Question/FlowChartCompletionQuestionTask.js","components/Question/MatchingHeadingsQuestionItem.js","components/Question/MatchingHeadingsQuestionTask.js","components/Question/MatchingFeaturesQuestionItem.js","components/Question/MatchingFeaturesQuestionTask.js","components/Question/MatchingSentenceEndingsQuestionItem.js","components/Question/MatchingSentenceEndingsQuestionTask.js","components/Question/TrueFalseNotGivenQuestionItem.js","components/Question/TrueFalseNotGivenQuestionTask.js","components/Question/YesNoNotGivenQuestionItem.js","components/Question/YesNoNotGivenQuestionTask.js","components/Reading/QuestionFrame.js","components/Reading/SectionInfoFrame.js","components/Reading/TimerFrame.js","components/Reading/ReadingSectionFrame.js","components/Navigation/ReadingPracticesPage.js","components/Navigation/ReadingTestsPage.js","App.js","index.js"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","Home","_jsxs","className","children","_jsx","Link","to","Header","convertNewlinesToDoubleSpace","text","replace","PassageFrame","_ref","passageContext","passageTitle","passageSubtitle","passageText","highlightedText","setHighlightedText","useState","contextMenu","setContextMenu","renderTextWithHighlights","split","RegExp","join","map","part","index","includes","onContextMenu","event","preventDefault","selection","window","getSelection","toString","x","clientX","y","clientY","style","top","left","onClick","handleHighlight","handleUndoHighlight","newHighlightedText","filter","MultipleChoiceSelectOneQuestionItem","questionItem","onItemGrading","showAnswers","userAnswer","setUserAnswer","handleChange","target","value","useEffect","isCorrect","correctAnswer","questionNumber","questionText","questionOptions","option","isCorrectAnswer","isSelected","optionClass","type","name","onChange","disabled","htmlFor","QuestionTaskDescription","taskDescription","MultipleChoiceSelectOneQuestionTask","questionTask","onTaskGrading","correctAnswers","setCorrectAnswers","handleItemGrading","prevCorrect","questions","length","MultipleChoiceSelectManyQuestionItem","selectedAnswers","onSelectionChange","itemIsSelected","setItemIsSelected","itemIsCorrect","answer","setOptionClass","display","flexDirection","alignContent","width","textAlign","checked","MultipleChoiceSelectManyQuestionTask","setSelectedAnswers","handleSelectionChange","prevAnswers","TableCompletionQuestionItem","autoComplete","DataTable","data","header","slice","row","rowIndex","cell","cellIndex","TableCompletionQuestionTask","questionContent","class","NoteCompletionQuestionItem","NoteCompletionQuestionTask","questionTitle","content","SentenceCompletionQuestionItem","SentenceCompletionQuestionTask","SummaryCompletionQuestionItem","SummaryCompletionQuestionTask","SummaryCompletionWordListQuestionItem","heading","ListOfHeadingsTable","tableTitle","tableData","colSpan","SummaryCompletionWordListQuestionTask","DiagramCompletionQuestionItem","DiagramCompletionQuestionTask","imageSrc","setImageSrc","questionImagePath","loading","setLoading","async","image","default","error","console","loadImage","src","maxWidth","alt","FlowChartCompletionQuestionItem","FlowChartCompletionQuestionTask","MatchingHeadingsQuestionItem","MatchingHeadingsQuestionTask","exampleAnswer","padding","MatchingFeaturesQuestionItem","MatchingFeaturesQuestionTask","MatchingSentenceEndingsQuestionItem","MatchingSentenceEndingsQuestionTask","TrueFalseNotGivenQuestionItem","minHeight","marginLeft","TrueFalseNotGivenQuestionTask","YesNoNotGivenQuestionItem","YesNoNotGivenQuestionTask","QuestionFrame","questionsList","totalQuestions","setTotalQuestions","totalCorrect","setTotalCorrect","setShowAnswers","total","reduce","acc","questionType","handleTaskGrading","toggleShowAnswers","prevShowAnswers","SectionInfoFrame","taskTitle","taskSubtitle","TimerFrame","taskTime","time","setTime","timer","setInterval","prevTime","clearInterval","color","seconds","mins","Math","floor","secs","formatTime","ReadingSectionFrame","passage","ReadingPracticesPage","ReadingTestsPage","App","Routes","Route","path","element","HomePage","passageMultipleChoiceSelectOne","passageTableCompletion","passageNoteCompletion","passageSentenceCompletion","passageSummaryCompletion","passageSummaryCompletionWordList","passageDiagramCompletion","passageFlowChartCompletion","passageMatchingHeadings","passageMatchingFeatures","passageMatchingSentenceEndings","passageTrueFalseNotGiven","passageMultipleChoiceSelectMany","ReactDOM","render","Router","document","getElementById"],"mappings":"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","file":"static/js/main.d70de6c3.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 10;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './HomePage.css';\n\nfunction Home() {\n  return (\n<div className=\"home-page\">\n  <div className=\"jumbotron\">\n    <h1 className=\"display-4\">Welcome to the IELTS Test Simulator</h1>\n    <p>This web app provides a realistic simulation of the IELTS test, allowing you to practice under test conditions.</p>\n    <p>You can take practice tests, review your answers, and track your progress over time. Our goal is to help you achieve the best possible score on your IELTS test.</p>\n  </div>\n\n  {/* Listening Section */}\n  <div className=\"section-box\">\n    <h2>Listening Simulator</h2>\n    <p>The IELTS Listening test includes 4 recordings, each with 10 questions. You will hear a variety of native English accents, and the questions will assess your ability to understand main ideas, detailed factual information, and opinions.</p>\n    <p>With this simulator, you can practice listening to real-life conversations, lectures, and discussions, while answering IELTS-style questions to improve your listening skills.</p>\n    <ul>\n      <li><Link to=\"/ielts-simulator/listening-practices\">Listening Question Types</Link> (Coming soon)</li>\n      <li><Link to=\"/ielts-simulator/listening-tests\">Listening Practice Tests</Link> (Coming soon)</li>\n    </ul>\n  </div>\n\n  {/* Reading Section */}\n  <div className=\"section-box\">\n    <h2>Reading Simulator</h2>\n    <p>The IELTS Academic Reading test is divided into three parts, with a total of 40 questions. The passages range from descriptive and factual to discursive and analytical, and they may include diagrams, graphs, or illustrations.</p>\n    <p>With this simulator, you can familiarize yourself with the IELTS reading test format and question types, practice reading full passages and answering questions to enhance your reading comprehension.</p>\n    <ul>\n      <li><Link to=\"/ielts-simulator/reading-practices\">Reading Question Types</Link></li>\n      <li><Link to=\"/ielts-simulator/reading-tests\">Reading Practice Tests</Link></li>\n    </ul>\n  </div>\n\n  {/* Writing Section */}\n  <div className=\"section-box\">\n    <h2>Writing Simulator</h2>\n    <p>The IELTS Academic Writing test has two tasks. Task 1 asks you to summarize, describe, or explain information in a graph, table, chart, or diagram. Task 2 involves writing an essay in response to a point of view, argument, or problem.</p>\n    <p>With this simulator, you can practice both types of writing tasks, review sample answers, and receive tips on structuring your responses to achieve high marks.</p>\n    <ul>\n      <li><Link to=\"/ielts-simulator/writing-practices\">Writing Question Types</Link> (Coming soon)</li>\n      <li><Link to=\"/ielts-simulator/writing-tests\">Writing Practice Tests</Link> (Coming soon)</li>\n    </ul>\n  </div>\n</div>\n\n  );\n}\n\nexport default Home;","export default __webpack_public_path__ + \"static/media/logo.d8d9d6c3.jpg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../assets/logo.jpg';\nimport './Header.css';\n\nconst Header = () => {\n  const hostpage = \"/ielts-simulator\";\n  return (\n  <header className=\"header\">\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <ul>\n        <li><Link to=\"/ielts-simulator\">Home</Link></li>\n        {/* <li><Link to=\"/about\">About</Link></li> */}\n        <li><Link to= \"/ielts-simulator/reading-practices\">Reading Practices</Link></li>\n        <li><Link to=\"/ielts-simulator/reading-tests\">Reading Tests</Link></li>\n      </ul>\n    </nav>\n  </header>\n);\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport './ReadingStyles.css';\n\nfunction convertNewlinesToDoubleSpace(text) {\n  return text.replace(/\\n/g, '\\n\\n');\n}\n\nconst PassageFrame = ({ passageContext, passageTitle, passageSubtitle, passageText }) => {\n  const [highlightedText, setHighlightedText] = useState([]);\n  const [contextMenu, setContextMenu] = useState(null);\n\n  const handleContextMenu = (event) => {\n    event.preventDefault();\n    const selection = window.getSelection().toString();\n    if (selection) {\n      setContextMenu({\n        x: event.clientX,\n        y: event.clientY,\n        text: selection,\n      });\n    }\n  };\n\n  const handleHighlight = () => {\n    setHighlightedText([...highlightedText, contextMenu.text]);\n    setContextMenu(null);\n  };\n\n  const handleUndoHighlight = () => {\n    const newHighlightedText = highlightedText.filter(text => !contextMenu.text.includes(text));\n    setHighlightedText(newHighlightedText);\n    setContextMenu(null);\n  };\n\n  const renderTextWithHighlights = (text) => {\n    let parts = text.split(new RegExp(`(${highlightedText.join('|')})`, 'g'));\n    return parts.map((part, index) => \n      highlightedText.includes(part) ? <mark key={index}>{part}</mark> : part\n    );\n  };\n\n  return (\n    <div className=\"passage-frame\" onContextMenu={handleContextMenu}>\n      <p className=\"passage-context\">{renderTextWithHighlights(convertNewlinesToDoubleSpace(passageContext))}</p>\n      <h2 className=\"passage-title\">{passageTitle}</h2>\n      <h3 className=\"passage-subtitle\">{passageSubtitle}</h3>\n      <p className=\"passage-text\">{renderTextWithHighlights(convertNewlinesToDoubleSpace(passageText))}</p>\n      {contextMenu && (\n        <div \n          className=\"context-menu\" \n          style={{ top: contextMenu.y, left: contextMenu.x }}\n        >\n          <button onClick={handleHighlight}>Highlight</button>\n          <button onClick={handleUndoHighlight}>Undo Highlight</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PassageFrame;\nexport { convertNewlinesToDoubleSpace };","import React, { useState, useEffect } from 'react';\nimport './QuestionStyles.css';\n\nfunction MultipleChoiceSelectOneQuestionItem({ id, questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n    // const isCorrect = userAnswer === questionItem.correctAnswer[0];\n    // onItemGrading(isCorrect);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer[0];\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"multiple-choice-question question-item\">\n      <div className=\"question-text\">{questionItem.questionNumber}. {questionItem.questionText}</div>\n      {questionItem.questionOptions.map((option, index) => {\n        const isCorrectAnswer = option[0] === questionItem.correctAnswer[0];\n        const isSelected = option[0] === userAnswer;\n        const isIncorrectAnswer = isSelected && !isCorrectAnswer;\n        const isCorrectButUnselected = !isSelected && isCorrectAnswer;\n\n        let optionClass = \"\";\n        if (showAnswers) {\n          if (isIncorrectAnswer) {\n            optionClass = \"incorrect-answer\"; // red\n          } else if (isSelected && isCorrectAnswer) {\n            optionClass = \"correct-answer\"; // green\n          } else if (isCorrectButUnselected) {\n            optionClass = \"correct-unselected-answer\"; // yellow\n          }\n        }\n\n        return (\n          <div key={index} className={optionClass}>\n            <input \n              type=\"radio\" \n              id={`option-${questionItem.questionNumber}-${index}`} \n              name={`mcq-${questionItem.questionNumber}`} \n              value={option[0]} \n              onChange={handleChange} \n              disabled={showAnswers} \n            />\n            <label htmlFor={`option-${questionItem.questionNumber}-${index}`}>\n              {option[0]}. {option[1]}\n            </label>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default MultipleChoiceSelectOneQuestionItem;","import './QuestionStyles.css';\nimport { convertNewlinesToDoubleSpace } from '../Reading/PassageFrame';\n\n\nfunction QuestionTaskDescription({ taskDescription }) {\n    return (\n        <div className=\"question-task-description\">{convertNewlinesToDoubleSpace(taskDescription)}</div>\n    );\n}\n\nexport default QuestionTaskDescription;","import React, { useState, useEffect } from \"react\";\nimport MultipleChoiceSelectOneQuestionItem from \"./MultipleChoiceSelectOneQuestionItem\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\nfunction MultipleChoiceSelectOneQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"multiple-choice-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      {questionTask.questions.map((questionItem, index) => (\n        <MultipleChoiceSelectOneQuestionItem\n          key={index}\n          id={index}\n          questionItem={questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MultipleChoiceSelectOneQuestionTask;\n","import React, { useState, useEffect } from 'react';\nimport './QuestionStyles.css';\n\nfunction MultipleChoiceSelectManyQuestionItem({ id, questionItem, onItemGrading, showAnswers, correctAnswers, selectedAnswers, onSelectionChange }) {\n    const [itemIsSelected, setItemIsSelected] = useState(false);\n    const itemIsCorrect = correctAnswers.map((answer) => answer[0]).includes(questionItem[0]);\n    const [optionClass, setOptionClass] = useState(\"\");\n\n  const handleChange = (event) => {\n    setItemIsSelected(event.target.checked);\n    onSelectionChange(event.target.checked, questionItem[0]);\n  };\n\n  useEffect(() => {\n    if (showAnswers) {\n      onItemGrading(itemIsCorrect && itemIsSelected);\n      if (itemIsCorrect && itemIsSelected) {\n        setOptionClass(\"correct-answer\"); // green\n      }\n      else if (itemIsCorrect && !itemIsSelected) {\n        setOptionClass(\"correct-unselected-answer\"); // red\n      }\n      else if (itemIsSelected) {\n        setOptionClass(\"incorrect-answer\"); // red\n      }\n    }\n    else {\n      setOptionClass(\"\");\n    }\n\n  }, [showAnswers, itemIsSelected]);\n  \n  return (\n    <tr className={`multiple-choice-select-many-question question-item ${optionClass}`} style={{ display: 'flex', flexDirection: 'row', alignContent:'center'}}>\n      <td style={{width:'2em', textAlign:'center'}}> \n        <input \n          type=\"checkbox\" \n          onChange={handleChange} \n          disabled={showAnswers || (selectedAnswers.length >= correctAnswers.length && !selectedAnswers.map((answer) => answer[0]).includes(questionItem[0]))}\n        />\n      </td>\n      <td style={{width:'2em', textAlign: 'center'}}>\n        <div className=\"question-text\">{questionItem[0]}</div>\n      </td>\n      <td>\n        <div className=\"question-text\">{questionItem[1]}</div>\n      </td>\n    </tr>\n  );\n}\n\nexport default MultipleChoiceSelectManyQuestionItem;","import React, { useState, useEffect } from \"react\";\nimport MultipleChoiceSelectManyQuestionItem from \"./MultipleChoiceSelectManyQuestionItem\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\nfunction MultipleChoiceSelectManyQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  const handleSelectionChange = (isSelected, questionItem) => {\n    // Add or remove the selected answer from the list\n    setSelectedAnswers((prevAnswers) => {\n      if (isSelected) {\n        return [...prevAnswers, questionItem];\n      } else {\n        return prevAnswers.filter((answer) => answer !== questionItem);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers,selectedAnswers]);\n\n  return (\n    <div className=\"multiple-choice-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <table>\n        <tbody>\n            {questionTask.questions.map((questionItem, index) => (\n            <MultipleChoiceSelectManyQuestionItem\n              key={index}\n              id={index}\n              questionItem={questionItem}\n              onItemGrading={handleItemGrading}\n              showAnswers={showAnswers}\n              correctAnswers={questionTask.correctAnswers}\n              selectedAnswers={selectedAnswers}\n              onSelectionChange={handleSelectionChange}\n            />\n          ))}\n        </tbody>\n      </table>\n      <div className=\"task-score\">\n        {showAnswers ? `Task Score: ${correctAnswers} / ${questionTask.correctAnswers.length}` : \" \"}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default MultipleChoiceSelectManyQuestionTask;","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\nfunction TableCompletionQuestionItem({ questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer;\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"table-completion-question-item question-item\">\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <span className=\"fixed-width\">{questionItem.questionNumber}.</span>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                id={`option-${questionItem.questionNumber}`}\n                name={`table-${questionItem.questionNumber}`}\n                onChange={handleChange}\n                disabled={showAnswers} // Disable input when answers are shown\n                autoComplete=\"off\" // Disable auto-fill\n              />\n            </td>\n            {showAnswers && (\n              <td\n                className={(userAnswer === questionItem.correctAnswer) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n                {questionItem.correctAnswer}\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default TableCompletionQuestionItem;\n","import React from 'react';\nimport './TableStyles.css'; // Make sure to import your CSS file\n\nconst DataTable = ({ data }) => {\n  return (\n    <table className=\"table-bordered\">\n      <thead>\n        <tr>\n          {data[0].map((header, index) => (\n            <th key={index}>{header}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {data.slice(1).map((row, rowIndex) => (\n          <tr key={rowIndex}>\n            {row.map((cell, cellIndex) => (\n              <td key={cellIndex}>{cell}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DataTable;","import React, { useState, useEffect } from \"react\";\nimport TableCompletionQuestionItem from \"./TableCompletionQuestionItem\";\nimport DataTable from \"../Table/DataTable\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\nfunction TableCompletionQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"table-completion-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <DataTable data={questionTask.questionContent} />\n      <div class='your-answers-text'>Your Answers:</div>\n      {questionTask.questions.map((questionItem, index) => (\n        <TableCompletionQuestionItem\n          key={index}\n          id={index}\n          questionItem={questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default TableCompletionQuestionTask;\n","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\nfunction NoteCompletionQuestionItem({ questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer;\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"note-completion-question-item question-item\">\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <span className=\"fixed-width\">{questionItem.questionNumber}.</span>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                id={`option-${questionItem.questionNumber}`}\n                name={`table-${questionItem.questionNumber}`}\n                onChange={handleChange}\n                disabled={showAnswers} // Disable input when answers are shown\n                autoComplete=\"off\" // Disable auto-fill\n              />\n            </td>\n            {showAnswers && (\n              <td\n                className={(userAnswer === questionItem.correctAnswer) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n                {questionItem.correctAnswer}\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default NoteCompletionQuestionItem;\n","import React, { useState, useEffect } from \"react\";\nimport NoteCompletionQuestionItem from \"./NoteCompletionQuestionItem\";\nimport DataTable from \"../Table/DataTable\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\nfunction NoteCompletionQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"note-completion-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      {/* <DataTable data={questionTask.questionContent} /> */}\n      <h3 style={{textAlign:'center'}}>{questionTask.questionTitle}</h3>\n      {questionTask.questionContent.map((content, index) => (\n        <p>{content}</p>\n      ))}\n      <div class='your-answers-text'>Your Answers:</div>\n      {questionTask.questions.map((questionItem, index) => (\n        <NoteCompletionQuestionItem\n          key={index}\n          id={index}\n          questionItem={questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default NoteCompletionQuestionTask;\n","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\nfunction SentenceCompletionQuestionItem({ questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer;\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"sentence-completion-question-item question-item\">\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <span className=\"fixed-width\">{questionItem.questionNumber}.</span>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                id={`option-${questionItem.questionNumber}`}\n                name={`table-${questionItem.questionNumber}`}\n                onChange={handleChange}\n                disabled={showAnswers} // Disable input when answers are shown\n                autoComplete=\"off\" // Disable auto-fill\n              />\n            </td>\n            {showAnswers && (\n              <td\n                className={(userAnswer === questionItem.correctAnswer) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n                {questionItem.correctAnswer}\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default SentenceCompletionQuestionItem;\n","import React, { useState, useEffect } from \"react\";\nimport SentenceCompletionQuestionItem from \"./SentenceCompletionQuestionItem\";\nimport DataTable from \"../Table/DataTable\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\nfunction SentenceCompletionQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"sentence-completion-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      {/* <DataTable data={questionTask.questionContent} /> */}\n      <h3 style={{textAlign:'center'}}>{questionTask.questionTitle}</h3>\n      {questionTask.questionContent.map((content, index) => (\n        <p>{content}</p>\n      ))}\n      <div class='your-answers-text'>Your Answers:</div>\n      {questionTask.questions.map((questionItem, index) => (\n        <SentenceCompletionQuestionItem\n          key={index}\n          id={index}\n          questionItem={questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SentenceCompletionQuestionTask;\n","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\nfunction SummaryCompletionQuestionItem({ questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer;\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"summary-completion-question-item question-item\">\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <span className=\"fixed-width\">{questionItem.questionNumber}.</span>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                id={`option-${questionItem.questionNumber}`}\n                name={`table-${questionItem.questionNumber}`}\n                onChange={handleChange}\n                disabled={showAnswers} // Disable input when answers are shown\n                autoComplete=\"off\" // Disable auto-fill\n              />\n            </td>\n            {showAnswers && (\n              <td\n                className={(userAnswer === questionItem.correctAnswer) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n                {questionItem.correctAnswer}\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default SummaryCompletionQuestionItem;\n","import React, { useState, useEffect } from \"react\";\nimport SummaryCompletionQuestionItem from \"./SummaryCompletionQuestionItem\";\nimport DataTable from \"../Table/DataTable\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\nfunction SummaryCompletionQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"summary-completion-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <h3 style={{textAlign:'center'}}>{questionTask.questionTitle}</h3>\n      {questionTask.questionContent.map((content, index) => (\n        <p>{content}</p>\n      ))}\n      <div class='your-answers-text'>Your Answers:</div>\n      {questionTask.questions.map((questionItem, index) => (\n        <SummaryCompletionQuestionItem\n          key={index}\n          id={index}\n          questionItem={questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SummaryCompletionQuestionTask;\n","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\nfunction SummaryCompletionWordListQuestionItem({ questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer[0];\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"summmary-completion-word-list-question-item question-item\">\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <span className=\"fixed-width\">{questionItem.questionNumber}.</span>\n            </td>\n            <td>\n              <select\n                name={`heading-${questionItem.questionNumber}`}\n                id={`heading-${questionItem.questionNumber}`}\n                onChange={handleChange}\n                disabled={showAnswers}\n              >\n                <option value=\"\"></option>\n                {questionItem.questionOptions.map((heading, index) => (\n                  <option key={index} value={heading[0]}>\n                    {heading[0] + \" - \" + heading[1]}\n                  </option>\n                ))}\n              </select>\n            </td>\n            {showAnswers && (\n              <td\n                className={(userAnswer === questionItem.correctAnswer[0]) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n                {questionItem.correctAnswer[0] + \" - \" + questionItem.correctAnswer[1]}\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default SummaryCompletionWordListQuestionItem;\n","import React from 'react';\nimport './TableStyles.css';\n\nconst ListOfHeadingsTable = ({ tableTitle, tableData }) => {\n  return (\n    <table className=\"table-headings\">\n      <thead>\n        <tr>\n          <th colSpan={tableData[0].length} style={{ textAlign: 'center' }}>\n            {tableTitle}\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {tableData.map((row, rowIndex) => (\n          <tr key={rowIndex}>\n            {row.map((cell, cellIndex) => (\n              <td key={cellIndex}>{cell}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default ListOfHeadingsTable;","import React, { useState, useEffect } from \"react\";\nimport SummaryCompletionWordListQuestionItem from \"./SummaryCompletionWordListQuestionItem\";\nimport DataTable from \"../Table/DataTable\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport ListOfHeadingsTable from \"../Table/ListOfHeadingsTable\";\nimport './QuestionStyles.css';\n\nfunction SummaryCompletionWordListQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"summmary-completion-word-list-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <h3 style={{textAlign:'center'}}>{questionTask.questionTitle}</h3>\n      {questionTask.questionContent.map((content, index) => (\n        <p>{content}</p>\n      ))}\n      <ListOfHeadingsTable tableTitle = {questionTask.tableTitle} tableData={questionTask.tableData} />\n      <div class='your-answers-text'>Your Answers:</div>\n      {questionTask.questions.map((questionItem, index) => (\n        <SummaryCompletionWordListQuestionItem\n          key={index}\n          id={index}\n          questionItem={questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SummaryCompletionWordListQuestionTask;\n","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\nfunction DiagramCompletionQuestionItem({ questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer;\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"diagram-completion-question-item question-item\">\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <span className=\"fixed-width\">{questionItem.questionNumber}.</span>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                id={`option-${questionItem.questionNumber}`}\n                name={`table-${questionItem.questionNumber}`}\n                onChange={handleChange}\n                disabled={showAnswers} // Disable input when answers are shown\n                autoComplete=\"off\" // Disable auto-fill\n              />\n            </td>\n            {showAnswers && (\n              <td\n                className={(userAnswer === questionItem.correctAnswer) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n                {questionItem.correctAnswer}\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default DiagramCompletionQuestionItem;\n","import React, { useState, useEffect } from \"react\";\nimport DiagramCompletionQuestionItem from \"./DiagramCompletionQuestionItem\";\nimport DataTable from \"../Table/DataTable\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\nfunction DiagramCompletionQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [imageSrc, setImageSrc] = useState(questionTask.questionImagePath);\n  const [loading, setLoading] = useState(true);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  useEffect(() => {\n    const loadImage = async () => {\n      try {\n        const image = await import(questionTask.questionImagePath);\n        setImageSrc(image.default);\n      } catch (error) {\n        console.error('Error loading image:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadImage();\n  }, [questionTask]);\n\n  return (\n    <div className=\"diagram-completion-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <h3 style={{ textAlign: 'center' }}>{questionTask.questionTitle}</h3>\n\n      <div className=\"question-img\">\n        {loading ? (\n          <p>Loading image...</p>\n        ) : (\n          <img src={imageSrc} style={{ maxWidth: '95%'}} alt=\"Diagram\" />\n        )}\n      </div>\n      <div className='your-answers-text'>Your Answers:</div>\n      {questionTask.questions.map((questionItem, index) => (\n        <DiagramCompletionQuestionItem\n          key={index}\n          id={index}\n          questionItem={questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default DiagramCompletionQuestionTask;\n","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\nfunction FlowChartCompletionQuestionItem({ questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer;\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"flow-chart-completion-question-item question-item\">\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <span className=\"fixed-width\">{questionItem.questionNumber}.</span>\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                id={`option-${questionItem.questionNumber}`}\n                name={`table-${questionItem.questionNumber}`}\n                onChange={handleChange}\n                disabled={showAnswers} // Disable input when answers are shown\n                autoComplete=\"off\" // Disable auto-fill\n              />\n            </td>\n            {showAnswers && (\n              <td\n                className={(userAnswer === questionItem.correctAnswer) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n                {questionItem.correctAnswer}\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default FlowChartCompletionQuestionItem;\n","import React, { useState, useEffect } from 'react';\nimport FlowChartCompletionQuestionItem from './FlowChartCompletionQuestionItem';\nimport DataTable from '../Table/DataTable';\nimport QuestionTaskDescription from './QuestionTaskDescription';\nimport './QuestionStyles.css';\n\nfunction FlowChartCompletionQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [imageSrc, setImageSrc] = useState(questionTask.questionImagePath);\n  const [loading, setLoading] = useState(true);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  useEffect(() => {\n    const loadImage = async () => {\n      try {\n        const image = await import(questionTask.questionImagePath);\n        setImageSrc(image.default);\n      } catch (error) {\n        console.error('Error loading image:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadImage();\n  }, [questionTask]);\n\n  return (\n    <div className=\"flow-chart-completion-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <h3 style={{ textAlign: 'center' }}>{questionTask.questionTitle}</h3>\n\n      <div className=\"question-img\">\n        {loading ? (\n          <p>Loading image...</p>\n        ) : (\n          <img src={imageSrc} style={{ maxWidth: '95%'}} alt=\"Flow Chart\" />\n        )}\n      </div>\n\n      <div className='your-answers-text'>Your Answers:</div>\n      {questionTask.questions.map((questionItem, index) => (\n        <FlowChartCompletionQuestionItem\n          key={index}\n          id={index}\n          questionItem={questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default FlowChartCompletionQuestionTask;","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\n\nfunction MatchingHeadingsQuestionItem({ id, questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer;\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"matching-headings-question-item question-item\">\n    <table>\n      <tbody >\n        <tr >\n          <td style={{width:'5em', textAlign:'center'}}>\n            {questionItem.questionNumber}\n          </td>\n          <td style={{width:'5em', textAlign:'center'}}>\n            {questionItem.questionText}\n          </td>\n          <td style={{width:'5em', textAlign:'center'}}>\n            <select\n              name={`heading-${questionItem.questionNumber}`}\n              id={`heading-${questionItem.questionNumber}`}\n              onChange={handleChange}\n              disabled={showAnswers}\n            >\n              <option value=\"\"></option>\n              {questionItem.questionOptions.map((heading, index) => (\n                <option key={index} value={heading[0]}>\n                  {heading[0]}\n                </option>\n              ))}\n            </select>\n          </td>\n          {showAnswers && (\n            <td\n              className={(userAnswer === questionItem.correctAnswer[0]) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n              {questionItem.correctAnswer[0]}\n            </td>\n          )}\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  );\n}\n\nexport default MatchingHeadingsQuestionItem;\n\n\n  ","import React, { useState,useEffect} from 'react';\nimport MatchingHeadingsQuestionItem from \"./MatchingHeadingsQuestionItem\";\nimport ListOfHeadingsTable from \"../Table/ListOfHeadingsTable\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\n\nfunction MatchingHeadingsQuestionTask({ questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"matching-headings-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <ListOfHeadingsTable tableTitle = {questionTask.tableTitle} tableData={questionTask.tableData} />\n      {questionTask.exampleAnswer &&\n      <table>\n      <thead>\n        <tr style={{padding:'.25em'}}>\n          <th style={{width:'5em'}}>\n            Example\n          </th>\n          <th style={{width:'5em'}}>\n            {questionTask.exampleAnswer[0]}\n          </th>\n          <th style={{width:'5em'}}>\n            {questionTask.exampleAnswer[1]}\n          </th>\n        </tr>\n      </thead>\n      </table>\n      }        \n      {questionTask.questions.map((questionItem, index) => (\n        <MatchingHeadingsQuestionItem\n          key={index}\n          id={index}\n          questionItem = {questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MatchingHeadingsQuestionTask;\n\n","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\n\nfunction MatchingFeaturesQuestionItem({ id, questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer[0];\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"matching-headings-question-item question-item\">\n    <table>\n      <tbody >\n        <tr >\n          <td style={{width:'5em', textAlign:'center'}}>\n            {questionItem.questionNumber}\n          </td>\n          <td style={{width:'5em', textAlign:'center'}}>\n            <select\n              name={`heading-${questionItem.questionNumber}`}\n              id={`heading-${questionItem.questionNumber}`}\n              onChange={handleChange}\n              disabled={showAnswers}\n            >\n              <option value=\"\"></option>\n              {questionItem.questionOptions.map((heading, index) => (\n                <option key={index} value={heading[0]}>\n                  {heading[0]}\n                </option>\n              ))}\n            </select>\n          </td>\n          <td >\n            {questionItem.questionText}\n          </td>\n\n          {showAnswers && (\n            <td\n              className={(userAnswer === questionItem.correctAnswer[0]) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n              {questionItem.correctAnswer[0]}\n            </td>\n          )}\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  );\n}\n\nexport default MatchingFeaturesQuestionItem;\n\n\n  ","import React, { useState,useEffect} from 'react';\nimport MatchingFeaturesQuestionItem from \"./MatchingFeaturesQuestionItem\";\nimport ListOfHeadingsTable from \"../Table/ListOfHeadingsTable\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\n\nfunction MatchingFeaturesQuestionTask({ questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"matching-features-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <ListOfHeadingsTable tableTitle = {questionTask.tableTitle} tableData={questionTask.tableData} />\n      {questionTask.exampleAnswer &&\n      <table>\n      <thead>\n        <tr style={{padding:'.25em'}}>\n          <th style={{width:'5em'}}>\n            Example\n          </th>\n          <th style={{width:'5em'}}>\n            {questionTask.exampleAnswer[1]}\n          </th>\n          <th>\n            {questionTask.exampleAnswer[0]}\n          </th>\n        </tr>\n      </thead>\n      </table>\n      }      \n      {questionTask.questions.map((questionItem, index) => (\n        <MatchingFeaturesQuestionItem\n          key={index}\n          id={index}\n          questionItem = {questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MatchingFeaturesQuestionTask;\n\n","import React, {useState, useEffect} from \"react\";\nimport './QuestionStyles.css';\n\n\nfunction MatchingSentenceEndingsQuestionItem({ id, questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers && userAnswer !== null) {\n      const isCorrect = userAnswer === questionItem.correctAnswer[0];\n      onItemGrading(isCorrect);\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <div className=\"matching-sentence-endings-question-item question-item\">\n    <table>\n      <tbody >\n        <tr >\n          <td style={{width:'5em', textAlign:'center'}}>\n            {questionItem.questionNumber}\n          </td>\n          <td style={{maxWidth:'30em'}}>\n            {questionItem.questionText}\n          </td>\n          <td style={{width:'5em', textAlign:'center'}}>\n            <select\n              name={`heading-${questionItem.questionNumber}`}\n              id={`heading-${questionItem.questionNumber}`}\n              onChange={handleChange}\n              disabled={showAnswers}\n            >\n              <option value=\"\"></option>\n              {questionItem.questionOptions.map((heading, index) => (\n                <option key={index} value={heading[0]}>\n                  {heading[0]}\n                </option>\n              ))}\n            </select>\n          </td>\n          {showAnswers && (\n            <td\n              className={(userAnswer === questionItem.correctAnswer[0]) ? \"correct-answer\" : \"correct-answer-non-matching\"}>\n              {questionItem.correctAnswer[0]}\n            </td>\n          )}\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  );\n}\n\nexport default MatchingSentenceEndingsQuestionItem;\n\n\n  ","import React, { useState,useEffect} from 'react';\nimport MatchingSentenceEndingsQuestionItem from \"./MatchingSentenceEndingsQuestionItem\";\nimport ListOfHeadingsTable from \"../Table/ListOfHeadingsTable\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\n\nfunction MatchingSentenceEndingsQuestionTask({ questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"matching-features-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <ListOfHeadingsTable tableTitle = {questionTask.tableTitle} tableData={questionTask.tableData} />\n      {questionTask.exampleAnswer &&\n      <table>\n      <thead>\n        <tr style={{padding:'.25em'}}>\n          <th style={{width:'5em'}}>\n            Example\n          </th>\n          <th style={{width:'5em'}}>\n            {questionTask.exampleAnswer[1]}\n          </th>\n          <th>\n            {questionTask.exampleAnswer[0]}\n          </th>\n        </tr>\n      </thead>\n      </table>\n      }      \n      {questionTask.questions.map((questionItem, index) => (\n        <MatchingSentenceEndingsQuestionItem\n          key={index}\n          id={index}\n          questionItem = {questionItem}\n          onItemGrading={handleItemGrading}\n          showAnswers={showAnswers}\n        />\n      ))}\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MatchingSentenceEndingsQuestionTask;\n\n","import React, { useState, useEffect } from 'react';\nimport './QuestionStyles.css';\n\nfunction TrueFalseNotGivenQuestionItem({ id, questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n  const [optionClass, setOptionClass] = useState(\"\");\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers) {\n      const isCorrect = userAnswer === questionItem.correctAnswer;\n      onItemGrading(isCorrect);\n      if (isCorrect) {\n        setOptionClass(\"correct-answer\");\n      } else {\n        setOptionClass(\"incorrect-answer\");\n      }\n    }\n    else {\n      setOptionClass(\"\");\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <tr className={`true-false-notgiven-question-item question-item`}\n    style={{ display: 'flex', flexDirection: 'row', alignContent:'center', minHeight: '2.5em'}}>\n      <td style={{width:'2em', textAlign:'center'}}>\n        {questionItem.questionNumber}\n      </td>\n      <td style={{width:'26em'}}>\n        {questionItem.questionText}\n      </td>\n      <td style={{width:'6em'}}>\n        <select style={{width:'100%', textAlign:'center'}}\n          name={`heading-${questionItem.questionNumber}`}\n          id={`heading-${questionItem.questionNumber}`}\n          onChange={handleChange}\n          disabled={showAnswers}\n        >\n          <option value=\"\"></option>\n          {questionItem.questionOptions.map((heading, index) => (\n            <option key={index} value={heading}>\n              {heading}\n            </option>\n          ))}\n        </select>\n      </td>\n      <td\n        className={optionClass}\n        style = {{marginLeft: '1.5em'}}>\n        {showAnswers ? questionItem.correctAnswer : \"\"}\n      </td>\n    </tr>\n  );\n}\n\nexport default TrueFalseNotGivenQuestionItem;","import React, { useState, useEffect } from \"react\";\nimport TrueFalseNotGivenQuestionItem from \"./TrueFalseNotGivenQuestionItem\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\nfunction TrueFalseNotGivenQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"true-false-notgiven-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <table>\n        <tbody>\n          {questionTask.questions.map((questionItem, index) => (\n            <TrueFalseNotGivenQuestionItem\n              key={index}\n              id={index}\n              questionItem={questionItem}\n              onItemGrading={handleItemGrading}\n              showAnswers={showAnswers}\n              />\n          ))}\n        </tbody>\n      </table>\n      <div className=\"task-score\">\n        {showAnswers ? `Task Score: ${correctAnswers} / ${questionTask.questions.length}` : \" \"}\n      </div>\n    </div>\n  );\n}\n\nexport default TrueFalseNotGivenQuestionTask;\n","import React, { useState, useEffect } from 'react';\nimport './QuestionStyles.css';\n\nfunction YesNoNotGivenQuestionItem({ id, questionItem, onItemGrading, showAnswers }) {\n  const [userAnswer, setUserAnswer] = useState(null);\n  const [optionClass, setOptionClass] = useState(\"\");\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  useEffect(() => {\n    if (showAnswers) {\n      const isCorrect = userAnswer === questionItem.correctAnswer;\n      onItemGrading(isCorrect);\n      if (isCorrect) {\n        setOptionClass(\"correct-answer\");\n      } else {\n        setOptionClass(\"incorrect-answer\");\n      }\n    }\n    else {\n      setOptionClass(\"\");\n    }\n  }, [showAnswers, userAnswer]);\n\n  return (\n    <tr className={`yes-no-notgiven-question-item question-item`}\n    style={{ display: 'flex', flexDirection: 'row', alignContent:'center', minHeight: '2.5em'}}>\n      <td style={{width:'2em', textAlign:'center'}}>\n        {questionItem.questionNumber}\n      </td>\n      <td style={{width:'27em'}}>\n        {questionItem.questionText}\n      </td>\n      <td style={{width:'6em'}}>\n        <select style={{width:'100%', textAlign:'center'}}\n          name={`heading-${questionItem.questionNumber}`}\n          id={`heading-${questionItem.questionNumber}`}\n          onChange={handleChange}\n          disabled={showAnswers}\n        >\n          <option value=\"\"></option>\n          {questionItem.questionOptions.map((heading, index) => (\n            <option key={index} value={heading}>\n              {heading}\n            </option>\n          ))}\n        </select>\n      </td>\n      <td\n        className={optionClass}\n        style = {{marginLeft: '1em'}}>\n        {showAnswers ? questionItem.correctAnswer : \"\"}\n      </td>\n    </tr>\n  );\n}\n\nexport default YesNoNotGivenQuestionItem;","import React, { useState, useEffect } from \"react\";\nimport YesNoNotGivenQuestionItem from \"./YesNoNotGivenQuestionItem\";\nimport QuestionTaskDescription from \"./QuestionTaskDescription\";\nimport './QuestionStyles.css';\n\nfunction YesNoNotGivenQuestionTask({ id, questionTask, onTaskGrading, showAnswers }) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const handleItemGrading = (isCorrect) => {\n    // Increment or decrement based on whether the answer is correct or incorrect\n    setCorrectAnswers((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n    onTaskGrading(isCorrect);  // Notify parent of each individual grading event\n  };\n\n  useEffect(() => {\n    if (!showAnswers) {\n      setCorrectAnswers(0);  // Reset correct answers when hiding answers\n    }\n  }, [showAnswers]);\n\n  return (\n    <div className=\"yes-no-notgiven-question-task\">\n      <QuestionTaskDescription taskDescription={questionTask.taskDescription} />\n      <table>\n        <tbody>\n          {questionTask.questions.map((questionItem, index) => (\n            <YesNoNotGivenQuestionItem\n              key={index}\n              id={index}\n              questionItem={questionItem}\n              onItemGrading={handleItemGrading}\n              showAnswers={showAnswers}\n              />\n          ))}\n        </tbody>\n      </table>\n      {showAnswers && (\n        <div className=\"task-score\">\n          Task Score: {correctAnswers} / {questionTask.questions.length}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default YesNoNotGivenQuestionTask;\n","import React, { useEffect, useState } from \"react\";\nimport MultipleChoiceSelectOneQuestionTask from \"../Question/MultipleChoiceSelectOneQuestionTask\";\nimport MultipleChoiceSelectManyQuestionTask from \"../Question/MultipleChoiceSelectManyQuestionTask\";\nimport TableCompletionQuestionTask from \"../Question/TableCompletionQuestionTask\";\nimport NoteCompletionQuestionTask from \"../Question/NoteCompletionQuestionTask\";\nimport SentenceCompletionQuestionTask from \"../Question/SentenceCompletionQuestionTask\";\nimport SummaryCompletionQuestionTask from \"../Question/SummaryCompletionQuestionTask\";\nimport SummaryCompletionWordListQuestionTask from \"../Question/SummaryCompletionWordListQuestionTask\";\nimport DiagramCompletionQuestionTask from \"../Question/DiagramCompletionQuestionTask\";\nimport FlowChartCompletionQuestionTask from \"../Question/FlowChartCompletionQuestionTask\";\nimport MatchingHeadingsQuestionTask from \"../Question/MatchingHeadingsQuestionTask\";\nimport MatchingFeaturesQuestionTask from \"../Question/MatchingFeaturesQuestionTask\";\nimport MatchingSentenceEndingsQuestionTask from \"../Question/MatchingSentenceEndingsQuestionTask\";\nimport TrueFalseNotGivenQuestionTask from \"../Question/TrueFalseNotGivenQuestionTask\";\nimport YesNoNotGivenQuestionTask from \"../Question/YesNoNotGivenQuestionTask\";\nimport '../Question/QuestionStyles.css';\n\nfunction QuestionFrame({ questionsList }) {\n  const [totalQuestions, setTotalQuestions] = useState(0); // Collect total number of questions at the start\n  const [totalCorrect, setTotalCorrect] = useState(0);\n  const [showAnswers, setShowAnswers] = useState(false);\n\n  useEffect(() => {\n    // Calculate the total number of questions across all tasks when the component mounts\n    const total = questionsList.reduce((acc, questionTask) => {\n      // Add the number of questions in each task to the accumulator\n      if (questionTask.questionType === \"multiple-choice-select-many\") {\n        return acc + questionTask.correctAnswers.length;\n      }\n      return acc + questionTask.questions.length;\n    }, 0);\n    setTotalQuestions(total);\n    // Reset grading and answers visibility\n    setTotalCorrect(0);\n    setShowAnswers(false);\n  }, [questionsList]); // Only run when questionsList changes\n\n  const handleTaskGrading = (isCorrect) => {\n    // Update the total correct answers when a question task returns a correct answer\n    setTotalCorrect((prevCorrect) => prevCorrect + (isCorrect ? 1 : 0));\n  };\n\n  const toggleShowAnswers = () => {\n    setShowAnswers((prevShowAnswers) => !prevShowAnswers);\n    if (!showAnswers) {\n      setTotalCorrect(0);  // Reset correct answers when hiding answers\n    }\n  };\n\n  // const questionTaskComponents = {\n  //   'multiple-choice-select-one': MultipleChoiceQuestionTask,\n  //   'table-completion': TableCompletionQuestionTask,\n  //   'note-completion': NoteCompletionQuestionTask,\n  //   'sentence-completion': SentenceCompletionQuestionTask,\n  //   'summary-completion': SummaryCompletionQuestionTask,\n  //   'summary-completion-word-list': SummaryCompletionWordListQuestionTask,\n  //   'diagram-completion': DiagramCompletionQuestionTask,\n  //   'flow-chart-completion': FlowChartCompletionQuestionTask,\n  //   'matching-headings': MatchingHeadingsQuestionTask,\n  //   'matching-features': MatchingFeaturesQuestionTask,\n  //   'matching-sentence-endings': MatchingSentenceEndingsQuestionTask,\n  // };\n  \n\n  return (\n    <div className=\"question-frame\">\n      {questionsList.map((questionTask, index) => {\n        switch (questionTask.questionType) {\n          case \"multiple-choice-select-one\":\n            return (\n              <MultipleChoiceSelectOneQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n          case \"matching-headings\":\n            return (\n              <MatchingHeadingsQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n          case \"matching-features\":\n            return (\n              <MatchingFeaturesQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n            case \"matching-sentence-endings\":\n            return (\n              <MatchingSentenceEndingsQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n          case \"table-completion\":\n            return (\n              <TableCompletionQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n          case \"note-completion\":\n            return (\n              <NoteCompletionQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n          case \"sentence-completion\":\n            return (\n              <SentenceCompletionQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n          case \"summary-completion\":\n            return (\n              <SummaryCompletionQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n            case \"summary-completion-word-list\":\n            return (\n              <SummaryCompletionWordListQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n            case \"diagram-completion\":\n            return (\n              <DiagramCompletionQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n            case \"flow-chart-completion\":\n            return (\n              <FlowChartCompletionQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n            case \"true-false-notgiven\":\n            return (\n              <TrueFalseNotGivenQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n            case \"yes-no-notgiven\":\n            return (\n              <YesNoNotGivenQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n            case \"multiple-choice-select-many\":\n            return (\n              <MultipleChoiceSelectManyQuestionTask\n                key={index}\n                id={index}\n                questionTask={questionTask}\n                onTaskGrading={handleTaskGrading}\n                showAnswers={showAnswers}\n              />\n            );\n          \n          default:\n            return null;\n        }\n      })}\n\n      <button id=\"show-answers-btn\" onClick={toggleShowAnswers}>\n        {showAnswers ? \"Hide Answers\" : \"Show Answers\"}\n      </button>\n\n      {showAnswers && (\n        <div id=\"correct-answers-count\">\n          You Scored: {totalCorrect} / {totalQuestions}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default QuestionFrame;\n","import { convertNewlinesToDoubleSpace } from \"./PassageFrame\";\n\nconst SectionInfoFrame = ({ taskTitle, taskSubtitle}) => (\n    <div className=\"section-info-frame\">\n      <h1 class=\"task-title\">{taskTitle}</h1>\n      <p class=\"task-subtitle\">{convertNewlinesToDoubleSpace(taskSubtitle)}</p>\n    </div>\n  );\n  \n  export default SectionInfoFrame;","import React, { useState, useEffect } from 'react';\n\nconst TimerFrame = ({ taskTime }) => {\n  const [time, setTime] = useState(taskTime);\n\n  useEffect(() => {\n    if (time <= 0) return;\n\n    const timer = setInterval(() => {\n      setTime(prevTime => {\n        if (prevTime <= 1) {\n          clearInterval(timer);\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [time]);\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n  };\n\n  return (\n    <div className=\"timer-frame\">\n      <p className=\"timer\" style={{ color: time < 60 ? 'red' : 'black' }}>\n      Time remaining: {formatTime(time)}\n      </p>\n    </div>\n  );\n};\n\nexport default TimerFrame;","import React from 'react';\nimport PassageFrame from './PassageFrame';\nimport QuestionFrame from '../Reading/QuestionFrame';\nimport SectionInfoFrame from './SectionInfoFrame';\nimport TimerFrame from './TimerFrame';\nimport './ReadingStyles.css';\n\nconst ReadingSectionFrame = ({ passage }) => (\n  <div className=\"passage-page\">\n    <SectionInfoFrame taskTitle={passage.taskTitle} taskSubtitle={passage.taskSubtitle} />\n    <PassageFrame \n      passageContext={passage.passageContext}\n      passageTitle={passage.passageTitle} \n      passageSubtitle={passage.passageSubtitle} \n      passageText={passage.passageText} \n    />\n    <QuestionFrame questionsList={passage.questionsList} />\n    <TimerFrame taskTime = {passage.taskTime}/>\n  </div>\n);\n\nexport default ReadingSectionFrame;","\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport './ReadingPracticesPage.css';\n\nconst ReadingPracticesPage = () => (\n  <div className=\"reading-practices-page\">\n    <div className=\"jumbotron\">\n      <h1 className=\"display-4\">Reading Practices</h1>\n      <p>Practice different types of reading questions to improve your skills.</p>\n    </div>\n    <table className=\"practices-table\">\n      <thead>\n        <tr>\n          <th>Question Type</th>\n          <th>Task Description</th>\n          <th>Recommended Time</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/multiple-choice-select-one\">Multiple Choice</Link></td>\n          <td>Select the correct answer from a list of options.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/table-completion\">Table Completion</Link></td>\n          <td>Fill in the blanks in a table based on the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/note-completion\">Note Completion</Link></td>\n          <td>Fill in the blanks in notes based on the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/sentence-completion\">Sentence Completion</Link></td>\n          <td>Fill in the blanks in sentences based on the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/summary-completion\">Summary Completion</Link></td>\n          <td>Fill in the blanks in a summary based on the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/summary-completion-word-list\">Summary Completion (Word List)</Link></td>\n          <td>Fill in the blanks in a summary based on a list of words.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/diagram-completion\">Diagram Completion</Link></td>\n          <td>Fill in the blanks in a diagram based on the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/flow-chart-completion\">Flow Chart Completion</Link></td>\n          <td>Fill in the blanks in a flow chart based on the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/matching-headings\">Matching Headings</Link></td>\n          <td>Match headings to the correct paragraphs in the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/matching-features\">Matching Features</Link></td>\n          <td>Match features to the correct subjects in the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/matching-sentence-endings\">Matching Sentence Endings</Link></td>\n          <td>Match the correct ending to sentences based on information in the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/true-false-not-given\">True/False/Not Given</Link></td>\n          <td>Determine if statements are true, false, or not given based on the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/yes-no-not-given\">Yes/No/Not Given</Link></td>\n          <td>Determine if statements are yes, no, or not given based on the passage.</td>\n          <td>10 minutes</td>\n        </tr>\n        <tr>\n          <td><Link to=\"/ielts-simulator/reading-practices/multiple-choice-select-many\">Multiple Choice (Select Many)</Link></td>\n          <td>Select all correct answers from a list of options.</td>\n          <td>10 minutes</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n);\n\nexport default ReadingPracticesPage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ReadingTestsPage = () => (\n  <ul>\n    <li><Link to=\"/reading/tests/test-1\">Reading Test 1</Link></li>\n    <li><Link to=\"/reading/tests/test-2\">Reading Test 2</Link></li>\n    <li><Link to=\"/reading/tests/test-3\">Reading Test 3</Link></li>\n  </ul>\n);\n\nexport default ReadingTestsPage;","import React from 'react';\nimport { Route, Routes, Link } from 'react-router-dom';\nimport HomePage from './components/Navigation/HomePage';\nimport About from './components/About/About';\nimport Header from './components/Navigation/Header';\nimport ReadingSectionFrame from './components/Reading/ReadingSectionFrame';\nimport passageMultipleChoiceSelectOne from './components/assets/json/multiple-choice-select-one.json';\nimport passageMultipleChoiceSelectMany from './components/assets/json/multiple-choice-select-many.json';\nimport passageTableCompletion from './components/assets/json/table-completion.json';\nimport passageNoteCompletion from './components/assets/json/note-completion.json';\nimport passageSentenceCompletion from './components/assets/json/sentence-completion.json';\nimport passageSummaryCompletion from './components/assets/json/summary-completion.json';\nimport passageSummaryCompletionWordList from './components/assets/json/summary-completion-word-list.json';\nimport passageMatchingHeadings from './components/assets/json/matching-headings.json';\nimport passageMatchingFeatures from './components/assets/json/matching-features.json';\nimport passageMatchingSentenceEndings from './components/assets/json/matching-sentence-endings.json';\nimport passageDiagramCompletion from './components/assets/json/diagram-completion.json';\nimport passageFlowChartCompletion from './components/assets/json/flow-chart-completion.json';\nimport passageTrueFalseNotGiven from './components/assets/json/true-false-notgiven.json';\n// import passageYesNoNotGiven from './components/assets/json/yes_no_not_given.json';\n\nimport ReadingPracticesPage from './components/Navigation/ReadingPracticesPage';\nimport ReadingTestsPage from './components/Navigation/ReadingTestsPage';\nimport './App.css';\n// import GradingComponent from './components/Grading/GradingComponent';\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Routes>\n        <Route path=\"/ielts-simulator\" element={<HomePage />} />\n        {/* <Route path=\"/about\" element={<About />} /> */}\n        <Route path=\"/ielts-simulator/reading-practices\" element={<ReadingPracticesPage />} />\n        <Route path=\"/ielts-simulator/reading-tests\" element={<ReadingTestsPage />} />\n        <Route path=\"/ielts-simulator/reading-practices/multiple-choice-select-one\" element={<ReadingSectionFrame passage={passageMultipleChoiceSelectOne}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/table-completion\" element={<ReadingSectionFrame passage={passageTableCompletion}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/note-completion\" element={<ReadingSectionFrame passage={passageNoteCompletion}/>} /> \n        <Route path=\"/ielts-simulator/reading-practices/sentence-completion\" element={<ReadingSectionFrame passage={passageSentenceCompletion}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/summary-completion\" element={<ReadingSectionFrame passage={passageSummaryCompletion}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/summary-completion-word-list\" element={<ReadingSectionFrame passage={passageSummaryCompletionWordList}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/diagram-completion\" element={<ReadingSectionFrame passage={passageDiagramCompletion}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/flow-chart-completion\" element={<ReadingSectionFrame passage={passageFlowChartCompletion}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/matching-headings\" element={<ReadingSectionFrame passage={passageMatchingHeadings}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/matching-features\" element={<ReadingSectionFrame passage={passageMatchingFeatures}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/matching-sentence-endings\" element={<ReadingSectionFrame passage={passageMatchingSentenceEndings}/>} />\n        <Route path=\"/ielts-simulator/reading-practices/true-false-not-given\" element={<ReadingSectionFrame passage={passageTrueFalseNotGiven}/>} />\n        {/* <Route path=\"/ielts-simulator/reading-practices/yes-no-not-given\" element={<ReadingSectionFrame passage={passageYesNoNotGiven}/>} /> */}\n        <Route path=\"/ielts-simulator/reading-practices/multiple-choice-select-many\" element={<ReadingSectionFrame passage={passageMultipleChoiceSelectMany}/>} />\n        \n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}